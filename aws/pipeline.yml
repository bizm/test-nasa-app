AWSTemplateFormatVersion: 2010-09-09
Description: "Continuous Delivery Pipeline for test assignment NASA app"

Parameters:
  GitHubOwner:
    Type: String
    Default: bizm
  GitHubRepository:
    Type: String
    Default: zyme-caucus-integration
  GitHubBranch:
    Type: String
  ConnectionArn:
    Description: ARN of CodeStarSourceConnection for GitHub (Developer Tools > Connections)
    Type: String

Resources:

  # ECR ########################################################################
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: test-nasa-app

  # CodeBuild ##################################################################
  DockerBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn: ECRRepository
    Properties:
      Name: test-nasa-app-codebuild
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      SourceVersion: main
      ServiceRole: !GetAtt
        - CodeBuildServiceRole
        - Arn
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref "AWS::AccountId"
          - Name: ECR_REPOSITORY_URI
            Type: PLAINTEXT
            Value: !GetAtt ECRRepository.RepositoryUri

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: test-nasa-app-cb-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
              Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: test-nasa-app-cb-policy
          PolicyDocument:
            Version: 2021-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - ecr:*
                  - logs:*
                Resource: *

  # S3 (Artifact store bucket) #################################################
  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      # Make bucket name unique by adding stack id
      BucketName: !Join
        - "-"
        - - !Sub test-nasa-app-pipeline-artifacts
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
          - NoncurrentVersionExpirationInDays: 1
            Status: Enabled
    DeletionPolicy: Delete

  CodePipelineArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Sub
              - ${BucketArn}/*
              - { BucketArn: !GetAtt CodePipelineArtifactStoreBucket.Arn }
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Sub
              - ${BucketArn}/*
              - { BucketArn: !GetAtt CodePipelineArtifactStoreBucket.Arn }
            Condition:
              Bool:
                'aws:SecureTransport': false

  # CodePipeline ###############################################################
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - DockerBuildProject
      - CodePipelineArtifactStoreBucket
      - CodePipelineArtifactStoreBucketPolicy
    Properties:
      Name: test-nasa-app-pipeline
      RoleArn: !GetAtt
        - CodePipelineServiceRole
        - Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref ConnectionArn
                FullRepositoryId: !Join [ "/", [ !Ref GitHubOwner, !Ref GitHubRepository ]]
                BranchName: !Ref GitHubBranch
                DetectChanges: true
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: DockerBuild
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref DockerBuildProject
                PrimarySource: SourceOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt
                  - CloudFormationServiceRole
                  - Arn
                StackName: test-nasa-app-deployment
                TemplatePath: "SourceOutput::deployment.yml"
              RunOrder: 1

  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: test-nasa-app-pipeline-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: test-nasa-app-pipeline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:GetRole'
                  - 'iam:PassRole'
                  - 'iam:DetachRolePolicy'
                  - 'iam:DeleteRole'
                  - 'iam:CreateRole'
                  - 'iam:AttachRolePolicy'
                Resource: '*'
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'cloudformation:*'
                  - ec2:*
                  - ecs:*
                  - autoscaling:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codestar-connections:UseConnection'
                Resource: !Ref ConnectionArn
                Condition:
                  ForAllValues:StringEquals:
                    codestar-connections:FullRepositoryId: !Join [ "/", [ !Ref GitHubOwner, !Ref GitHubRepository ]]

  CloudFormationServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: test-nasa-app-cf-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: test-nasa-app-cf-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:AttachRolePolicy'
                  - 'iam:CreateRole'
                  - 'iam:DetachRolePolicy'
                  - 'iam:DeleteRole'
                  - 'iam:DeleteRolePolicy'
                  - 'iam:GetRole'
                  - 'iam:GetRolePolicy'
                  - 'iam:PassRole'
                  - 'iam:PutRolePolicy'
                  - 'iam:TagRole'
                  - 'iam:UntagRole'
                  - 'iam:UpdateAssumeRolePolicy'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:CreateServiceLinkedRole'
                  - 'iam:PutRolePolicy'
                  - 'iam:UpdateRoleDescription'
                  - 'iam:GetServiceLinkedRoleDeletionStatus'
                  - 'iam:DeleteServiceLinkedRole'
                Resource: 'arn:aws:iam::*:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS*'
                Condition:
                  StringLike:
                    'iam:AWSServiceName': 'ecs.amazonaws.com'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DeleteLogGroup'
                  - 'logs:DeleteLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cloudformation:*'
                  - 'cloudwatch:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub
                  - ${BucketArn}/*
                  - { BucketArn: !GetAtt CodePipelineArtifactStoreBucket.Arn }
              - Effect: Allow
                Action:
                  - 'apigateway:*'
                Resource: !Sub arn:aws:apigateway:${AWS::Region}::*
