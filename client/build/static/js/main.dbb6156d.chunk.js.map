{"version":3,"sources":["constants.js","ModeSelector.js","Display.js","api.js","App.js","reportWebVitals.js","index.js"],"names":["MODE_DECEMBER_2015","MODE_SELECTED_YEAR","ModeSelector","handleModeChange","e","setState","mode","currentTarget","value","doParentCallback","handleYearChange","target","Number","year","data","state","Constants","props","parentCallback","Date","getFullYear","console","log","this","undefined","className","type","name","checked","onChange","disabled","Component","Display","number","String","replaceAll","loading","class","href","url","approachDistance","formatNumber","approachDate","diameterMin","diameterMax","getAPIUrl","API","fetch","a","response","status","json","body","Error","message","App","timeoutIdApi","scheduleAPICall","timeout","clearTimeout","setTimeout","callAPI","then","makeDisplayData","catch","err","modeSelector","current","clear","error","React","createRef","displayData","nasa_jpl_url","close_approach_data","miss_distance","kilometers","close_approach_date","estimated_diameter","meters","estimated_diameter_min","estimated_diameter_max","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbb6156d.chunk.js","sourcesContent":["export const MODE_DECEMBER_2015 = \"december-2015\";\nexport const MODE_SELECTED_YEAR = \"selected-year\";\n\nexport const TIMEOUT_UI_RESPONSE_DELAY = 300;\nexport const TIMEOUT_RETRY = 3000;\n","import React, { Component } from 'react';\nimport * as Constants from './constants';\n\nclass ModeSelector extends Component {\n  constructor() {\n    super();\n    this.state = {\n      mode: null,\n      year: new Date().getFullYear()\n    };\n  }\n\n  handleModeChange = e => {\n    this.setState({\n      mode: e.currentTarget.value\n    }, this.doParentCallback);\n  }\n\n  handleYearChange = e => {\n    const value = (e.target.value === \"\") ? null : Number(e.target.value);\n    this.setState({\n      year: value\n    }, this.doParentCallback);\n  }\n\n  doParentCallback = () => {\n    let data = {\n      mode: this.state.mode,\n      year: this.state.year\n    };\n    if (!data.mode) {\n      return;\n    }\n    if (data.mode === Constants.MODE_DECEMBER_2015) {\n      delete data.year;\n    } else if (!this.state.year) {\n      return;\n    }\n    this.props.parentCallback(data);\n  }\n\n  clear() {\n    console.log(\"clearing it\");\n    this.setState({ mode: undefined });\n  }\n\n  render() {\n    return (\n      <div className=\"mode-selector\">Choose an option below to show\n        <label><input type=\"radio\" value={Constants.MODE_DECEMBER_2015} name=\"mode\"\n          checked={this.state.mode === Constants.MODE_DECEMBER_2015}\n          onChange={this.handleModeChange} />\n          the asteroid that passed the closest to Earth between December 19 and December 26 year 2015</label>\n        <label><input type=\"radio\" value={Constants.MODE_SELECTED_YEAR} name=\"mode\"\n          checked={this.state.mode === Constants.MODE_SELECTED_YEAR}\n          onChange={this.handleModeChange} />the largest asteroid for year\n          {/* will work in HTML5 only, normally we should use some proper component in here */}\n          <input type=\"number\" value={this.state.year} onChange={this.handleYearChange}\n            disabled={this.state.mode !== Constants.MODE_SELECTED_YEAR } />\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default ModeSelector;\n","import React, { Component } from 'react';\n\n/**\n * A component to display fetched data. It displays loader during the call.\n * When data is fetched it shows Object name as a link pointing to its NASA's database entry.\n * Additionally it displays approach or diameter data based on user selected option.\n * In case of error or no data it doesn't show or say anything.\n **/\nclass Display extends Component {\n\n  /**\n   * Format number to keep only two last digits in fractional portion.\n   * We use regex here and it is a terrible way to format numbers. Never do that!\n   * Only reason we do it this way here is that it is simple. In theory this function\n   * must be rewritten.\n   **/\n  formatNumber(number) {\n    return String(number).replaceAll(/^(\\d*\\.\\d{2}).*$/g, \"$1\");\n  }\n\n  render() {\n    return (\n      <div className=\"display\">\n        {this.props.loading &&\n          /* Yes, we should have better loader here. Some other day. Maybe... */\n          <span class=\"loader\">Loading</span>\n        }\n        {this.props.data && !this.props.loading &&\n          <a href={this.props.data.url}>{this.props.data.name}</a>\n        }\n        {this.props.data && this.props.data.approachDistance &&\n          <span>Closest approach {this.formatNumber(this.props.data.approachDistance)}km on {this.props.data.approachDate}</span>\n        }\n        {this.props.data && this.props.data.diameterMin &&\n          <span>Estimated diameter {this.formatNumber(this.props.data.diameterMin)}m &mdash; {this.formatNumber(this.props.data.diameterMax)}m</span>\n        }\n      </div>\n    )\n  }\n}\n\nexport default Display;\n","import * as Constants from './constants';\n\n/**\n * Returns a url for API call based on mode (user selection). Default value\n * is '/api/ping'.\n **/\nfunction getAPIUrl (mode, year) {\n  switch (mode) {\n    case Constants.MODE_DECEMBER_2015:\n      return \"/api/2015-12-19/2015-12-26\";\n    case Constants.MODE_SELECTED_YEAR:\n      return `/api/${year}`;\n    default:\n      return \"/api/ping\";\n  }\n}\n\nexport class API {\n  /**\n   * Fetches data from API endpoint matching user selected option (mode).\n   * In case of 202 (Accepted) response we return null. It should be treated by app\n   * as a request in progress. In that case it should retry the same call later. Otherwise\n   * anything that is not 200 (OK) is treated as error.\n   */\n  static fetch = async (mode, year) => {\n    const url = getAPIUrl(mode, year);\n    const response = await fetch(url);\n\n    if (response.status === 202) {\n      return null;\n    }\n\n    const body = await response.json();\n    if (response.status !== 200) {\n      throw Error(body.message);\n    }\n\n    return body;\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport ModeSelector from  './ModeSelector';\nimport Display from './Display';\nimport * as Constants from './constants';\nimport { API } from './api';\n\nclass App extends Component {\n\n  timeoutIdApi = null;\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.modeSelector = React.createRef();\n  }\n\n  handleModeChange = (data) => {\n    this.scheduleAPICall(data, Constants.TIMEOUT_UI_RESPONSE_DELAY);\n  }\n\n  scheduleAPICall = (data, timeout) => {\n    if (this.timeoutIdApi) {\n      this.timeoutIdApi = clearTimeout(this.timeoutIdApi);\n    }\n    this.timeoutIdApi = setTimeout(() => {\n      this.callAPI(data);\n    }, timeout);\n  }\n\n  callAPI = (data) => {\n    this.setState({\n      mode: data.mode,\n      loading: true,\n      data: null\n    });\n    API.fetch(data.mode, data.year)\n      .then(response => {\n        // not a nice way to handle it, but for now we treat null as a 202 response from API\n        if (response === null) {\n          return this.scheduleAPICall(data, Constants.TIMEOUT_RETRY);\n        }\n\n        this.setState({\n          loading: false,\n          data: this.makeDisplayData(data.mode, response)\n        });\n      })\n      .catch(err => {\n        this.setState({\n          loading: false,\n          data: null,\n          mode: null\n        });\n        this.modeSelector.current.clear();\n        console.error(err);\n      });\n  }\n\n  makeDisplayData(mode, response) {\n    const displayData = {\n      name: response.name,\n      url: response.nasa_jpl_url\n    };\n    if (mode === Constants.MODE_DECEMBER_2015) {\n      displayData.approachDistance = response.close_approach_data[0].miss_distance.kilometers;\n      displayData.approachDate = response.close_approach_data[0].close_approach_date;\n    }\n    if (mode === Constants.MODE_SELECTED_YEAR) {\n      displayData.diameterMin = response.estimated_diameter.meters.estimated_diameter_min;\n      displayData.diameterMax = response.estimated_diameter.meters.estimated_diameter_max;\n    }\n    return displayData;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Test assignment for New Things Co | Valentyn Derkach</h1>\n        </header>\n        <ModeSelector parentCallback={this.handleModeChange} ref={this.modeSelector} />\n        <Display loading={this.state.loading} data={this.state.data} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}